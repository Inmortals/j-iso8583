
export default class BaseSpec {

  static run(iso8583) {
    describe('dev test', () => {

      it('iso8583 pack test', async () => {

        iso8583.set(0, "0200");
        iso8583.set(3, "000000");
        iso8583.set(4, "000000000001");
        iso8583.set(11, "001082");
        iso8583.set(22, "021");
        iso8583.set(25, "00");
        iso8583.set(26, "06");
        iso8583.set(35, "6226097806938388D491C8C34DB509A8C85E9");
        iso8583.set(36, "996226097806938388D1561560500050000001015949849214000049120D7806938388D000000000D050002AA0C3787788A4AC00");
        iso8583.set(41, "00000026");
        iso8583.set(42, "852331059980072");
        iso8583.set(49, "156");
        iso8583.set(52, "60D894D6F4978EF5");
        iso8583.set(53, "2610000000000000");
        iso8583.set(60, "22000015000501");

        const request = await iso8583.pack({ isGenMac: true });
        const correctRequest = '00aa60000300006031000110010200302004C030C0981100000000000000000100108202100006376226097806938388D491C8C34DB509A8C85E900104996226097806938388D1561560500050000001015949849214000049120D7806938388D000000000D050002AA0C3787788A4AC00303030303030323638353233333130353939383030373231353660D894D6F4978EF526100000000000000014220000150005018888888888888888'

        request.should.equal(correctRequest)
      });

      it('iso8583 unpack test', async () => {

        var sRecv = "00aa60000300006031000110010210703E00810AD0801316622609780693838800000000000000000100108215343812014912120100084852331032393039383331353334333830303030303030303236383532333331303539393830303732223033303830303030202020343835323030303020202031353600142200001500050100034355508888888888888888";
        await iso8583.unpack({ data: sRecv, isVerifyMac: false });

        // Message = 0210
        // Bitmap  = 70 3E 00 81 0A D0 80 13 
        // Bit  2  = (16)6226097806938388
        // Bit  3  = 000000
        // Bit  4  = 000000000001
        // Bit 11  = 001082
        // Bit 12  = 153438
        // Bit 13  = 1201
        // Bit 14  = 4912
        // Bit 15  = 1201
        // Bit 25  = 00
        // Bit 32  = (8)48523310
        // Bit 37  = 290983153438
        // Bit 39  = 00
        // Bit 41  = 00000026
        // Bit 42  = 852331059980072
        // Bit 44  = (22)03080000   48520000   
        // Bit 49  = 156
        // Bit 60  = (14)22000015000501
        // Bit 63  = (3)CUP
        // Bit 64  = 4235333641323341 

        iso8583.get(0).should.equal('0210')
        iso8583.get(2).should.equal('6226097806938388')
        iso8583.get(3).should.equal('000000')
        iso8583.get(4).should.equal('000000000001')
        iso8583.get(11).should.equal('001082')
        iso8583.get(12).should.equal('153438')
        iso8583.get(13).should.equal('1201')
        iso8583.get(14).should.equal('4912')
        iso8583.get(15).should.equal('1201')
        iso8583.get(25).should.equal('00')
        iso8583.get(32).should.equal('48523310')
        iso8583.get(37).should.equal('290983153438')
        iso8583.get(39).should.equal('00')
        iso8583.get(41).should.equal('00000026')
        iso8583.get(42).should.equal('852331059980072')
        iso8583.get(44).should.equal('03080000   48520000   ')
        iso8583.get(49).should.equal('156')
        iso8583.get(60).should.equal('22000015000501')
        iso8583.get(63).should.equal('CUP')
        iso8583.get(64).should.equal('8888888888888888')
      });
    });
  }

}